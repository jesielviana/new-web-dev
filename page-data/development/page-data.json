{"componentChunkName":"component---src-templates-mdx-js","path":"/development","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/development\",\n  \"date\": \"2019-01-27\",\n  \"metaTitle\": \"Development\",\n  \"title\": \"Development Guide\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Intro\"), mdx(\"p\", null, \"There are many ways to write JavaScript, and JavaScript is used for many different purposes from mobile apps to command line scripts and of course in the browser. This is a guide for how you can get started writing JS in an environment that will suit you well for this course and future projects you take on in JS.\"), mdx(InfoMessage, {\n    showIcon: true,\n    mdxType: \"InfoMessage\"\n  }, mdx(\"p\", null, mdx(\"strong\", null, \"For Windows users:\")), mdx(\"p\", null, \"One of the main appeals of web development is that products work on all devices regardless of OS. That being said, there can be some difficulties when developing web apps from different OS's (particularly Windows). Expect to spend some time debugging and looking around for answers when things don't work quite as expected when installing dependencies and submitting work. The teaching staff will work with you to mitigate these problems!\"), mdx(\"p\", null, \"We highly recommend you use\", ' ', mdx(\"a\", {\n    href: \"https://gitforwindows.org/\"\n  }, \"git bash\"), \" for running scripts. This will allow for more linux-like syntax and operations.\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Installing node\"), mdx(\"p\", null, \"JavaScript was originally written to bring dynamic content to HTML and CSS websites. Node (Node.js) is a run-time compiler for running JS anywhere and everywhere (not just in the browser). Node Package Manager (npm) is the system which Node uses for installing dependencies (packages) for a program which let you take advantage of frameworks, functions, and tools other people have written.\"), mdx(\"p\", null, \"React and Express are popular examples of Node packages which we will become familiar with over the course of this semester.\"), mdx(\"p\", null, \"If you've heard of Yarn, it's another package manager developed by Facebook which largely does the same thing as NPM with subtle differences. For this course, we will stick to npm for homeworks.\"), mdx(\"p\", null, \"To check if Node is installed, open the Terminal or Command Prompt app on your computer and run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"node -v\\n\")), mdx(\"p\", null, \"If something along the lines of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v10.16.3\"), \" is returned, Node is set up successfully. If you have a version less than 8, consider installing a more recent release. If there is an error or no version is returned, follow the directions below.\"), mdx(\"p\", null, \"You have a few options for installing node, though we highly recommend the first:\"), mdx(\"h4\", null, \"1. Installing node via NVM\"), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"preferred way to install node for this course\"), \" is NVM (Node Version Manager). This lets you change versions of node from your command line which can make things smoother in the case you have node 8 installed by default but we actually want use to use node 10.\"), mdx(\"p\", null, \"NVM is developed for Linux-based devices (including Macs), so for Windows you should use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/coreybutler/nvm-windows\"\n  }, \"this alternative\"), \".\"), mdx(\"p\", null, \"To install NVM, follow \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/nvm-sh/nvm\"\n  }, \"this guide.\")), mdx(\"h4\", null, \"2. Installing node directly\"), mdx(\"p\", null, \"To install Node, proceed to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/en/download/\"\n  }, \"node.js website\"), \" and download the latest Long Term Support (LTS) version of Node. When the download has finished installing, open the file and follow the prompted instructions until Node is set up on your machine.\"), mdx(\"p\", null, \"To assert everything installed correctly, run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"node -v\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Picking a code editor\"), mdx(\"p\", null, \"Few people write JS in full-fledged IDE's in the way you might be used to running Java in Eclipse or IntelliJ. Though there are solutions for this (like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.jetbrains.com/webstorm/\"\n  }, \"Webstorm\"), \") these often introduce overhead and unnecessary complexity.\"), mdx(\"p\", null, \"Instead, JS devs often use lighter tools like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://code.visualstudio.com\"\n  }, \"VSCode\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://atom.io\"\n  }, \"Atom\"), \", or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.sublimetext.com\"\n  }, \"Sublime Text\"), \". The CIS 197 staff tends to use VSCode because of the strong developer community, UI, and built-in terminal. All of these tools have built in package managers for installing packages which improve the developer experience like syntax highlighting, help formatting, and help with code completion.\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Developing and testing JavaScript code\"), mdx(\"p\", null, \"There are many ways to test JS code. For simple syntax checking, the easiest way is often via the developer tools in your browser (like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.google.com/web/tools/chrome-devtools/\"\n  }, \"Google Chrome\"), \") or by running the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \" command on its own in your terminal which gives you a Node-based JS REPL (type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ctrl + C\"), \" to exit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \").\"), mdx(\"p\", null, \"To test a JS file, navigate in your terminal to the directory where the file is located (if you're not sure how to do this, find an intro guide on how to using your terminal online). From there, you can run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node file-name\"), \". Any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" statement executed in your file will print out to the console of your terminal. This is also a good way to check for syntax errors. It can also be useful to make a new file specifically for testing functions in another file. In the test file, you can \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"require\"), \" the primary file and call functions there.\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Using a linter\"), mdx(\"p\", null, \"A linter is a tool for checking that your JavaScript code both does not have syntax errors and is properly styled. In your homework assignments, you can see a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc\"), \" file which specifies how to configure the linter to meet our preferred style guide for the course. You can learn more about ESLint \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://eslint.org\"\n  }, \"here.\")), mdx(\"p\", null, \"We recommend installing the ESLint package and related linter packages for your code editor of choice. Said packages will highlight issues with your code as you type so you can easily resolve them, much like a spell checker in Microsoft Word. You can also check for linter errors from your terminal via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eslint\"), \" package \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://eslint.org/docs/user-guide/command-line-interface\"\n  }, \"found here.\"), \" This is what we run when you submit your assignment to Gradescope.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"27/01/2019","due":null,"path":"/development","hasZip":null,"title":"Development Guide","metaTitle":"Development","hidden":null}}},"pageContext":{}},"staticQueryHashes":["2277278352","3649515864"]}