{"componentChunkName":"component---src-templates-markdown-js","path":"/lectures/9-redux","result":{"data":{"markdownRemark":{"html":"<p>class: center, middle, block-text</p>\n<h1>Redux</h1>\n<hr>\n<p>class: large</p>\n<h1>Managing Application State</h1>\n<p>In React, if we have a deep tree of components render components, it can be annoying to share state between very distant parts of the tree.</p>\n<p>Ideally, parts of our application state which are shared between these distant parts of the tree can be shared rather than explicitly passed up and down the tree.</p>\n<hr>\n<p>class: med-large</p>\n<h1>State in React-only apps</h1>\n<p>When a child component needs to change a parent component's state, it needs to be able to access functions that can manipulate parent component's state. This gets tricky. What if the parent has many ancestors? We'd have to pass the handlers everywhere. Gets messy...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>useState<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ChildComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>changeParentBool<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">changeParentBool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ParentComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>someBool<span class=\"token punctuation\">,</span> setBoolFunction<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ChildComponent changeParentBool<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setBoolFunction<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>Motivating Redux</h1>\n<p>Originally, React managed state as well as rendering a frontend based on that state.</p>\n<p>Hard to manage!</p>\n<p>Redux stores all of our state, handles mutations to that state, and can push state changes to React. Now, React doesn't need to manage any state - it can simply use the state from Redux and render a frontend appropriately.</p>\n<hr>\n<p>class: med-large</p>\n<h1>How Redux Works</h1>\n<p>Redux vocabulary</p>\n<ul>\n<li><em>state</em>: (typically) an object that stores our application's state</li>\n<li><em>store</em>: an object that holds the <em>state</em> and has several other functions that help manipulate the state</li>\n<li><em>subscribe</em>: a function (available on the <em>store</em>) that executes whenever the <em>state</em> changes. Like an event listener!</li>\n<li><em>action</em>: an object that describes how the state should change</li>\n<li><em>dispatch</em>: a verb - to <em>dispatch</em> an action</li>\n<li><em>reducer</em>: a function that takes in (state, action) pairs and returns a new state. Think about it as applying a transformation, as indicated by the action, to the state.</li>\n</ul>\n<hr>\n<p>class: med-large, smaller-code</p>\n<h2>Quick Redux Example</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> redux <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'INCR'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'DECR'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> state\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Create store with initial state 10</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'INCR'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'INCR'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'DECR'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'DECR'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h1>Using React with Redux</h1>\n<p>You don't <em>need</em> to use React with Redux - they work fine on their own. But the combination is really nice. Redux is a way of keeping track of state, and React components efficiently update based on their state.</p>\n<p>The tricky part is updating state based on events. To dispatch an action in response to event (like <code class=\"language-text\">click</code>), a component needs access to the store itself. For small applications, this isn't too bad; for larger ones, we may want to factor out this code into other modules.</p>\n<hr>\n<p>class: med-large</p>\n<h2>Taking a closer look at Redux</h2>\n<ul>\n<li>\n<p>Basic Components:</p>\n<ul>\n<li>Store</li>\n<li>Reducer</li>\n<li>Actions</li>\n<li>dispatching</li>\n</ul>\n</li>\n<li>\n<p>Advanced Components (today)</p>\n<ul>\n<li>Thunks</li>\n<li><code class=\"language-text\">connect</code> API</li>\n<li>combineReducers</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>class: med-large</p>\n<h2>Connecting React and Redux</h2>\n<p>React already has capabilities to re-render components based on changes to <code class=\"language-text\">props</code>. All we need to do is provide Redux state as <code class=\"language-text\">props</code> to React componnets.</p>\n<p>High-level:</p>\n<ul>\n<li><code class=\"language-text\">mapStateToProps</code> : specifies how Redux state should be provided to React via <code class=\"language-text\">props</code></li>\n<li><code class=\"language-text\">mapDispatchToProps</code> : provides functions (via <code class=\"language-text\">props</code>) to React components that let them dispatch actions</li>\n<li><code class=\"language-text\">connect</code> : a function that connects React to redux</li>\n<li><code class=\"language-text\">Provider</code> : a component that connects React to redux</li>\n</ul>\n<p><a href=\"https://github.com/cis197/react-redux-example\">Example link</a></p>\n<hr>\n<h2>cOoL sToRy...but how does this work w/ React?</h2>\n<ul>\n<li>Higher Order Component (HOC)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">connect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mstp<span class=\"token punctuation\">,</span> mdtp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Wrap</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectedComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">&lt;</span>Wrap\n          <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">mstp</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">mdtp</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Is it a little clearer what <code class=\"language-text\">mstp</code> and <code class=\"language-text\">mdtp</code> are doing?</li>\n</ul>\n<hr>\n<h2>Formally defining <code class=\"language-text\">connect</code></h2>\n<ul>\n<li>\n<p>Takes in two arguments <code class=\"language-text\">mapStateToProps</code> and <code class=\"language-text\">mapDispatchToProps</code></p>\n<ul>\n<li><code class=\"language-text\">mapStateToProps</code> is a function that takes in the state (and current properties optionally) and returns an object that is the part of the state that you want the component to keep track of. Injects this state into the props of the component.</li>\n<li><code class=\"language-text\">mapDispatchToProps</code> is a function that takes in <code class=\"language-text\">dispatch</code> (defined by the store) and returnsa n object containing <em>action creators</em> i.e. functions \"preloaded\" with dispatch and injects them into the props of the component</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Multiple Reducers</h2>\n<ul>\n<li>So now that we have some way of separating concerns in our app and seeing what components listen to which parts of our state, we should also organize our store as well.</li>\n<li>\n<p>General rule for each part of your app, you should have a reducer that handles that part e.g.</p>\n<ul>\n<li>Error reducer</li>\n<li>Authentication reducer</li>\n<li>Tweet reducer</li>\n<li>etc.</li>\n</ul>\n</li>\n<li>Primary advantage is that you can isolate behavior!</li>\n</ul>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n\n<span class=\"token keyword\">const</span> reducerA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> testA<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> reducerB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> testB<span class=\"token operator\">:</span> <span class=\"token string\">'B'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> reducerC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> testC<span class=\"token operator\">:</span> <span class=\"token string\">'C'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> finalReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// in main script</span>\n<span class=\"token keyword\">let</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>finalReducer<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// in connect</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mstp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mstp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>class: center</p>\n<h2>Mmk...that's cool and all. But what if you want to dispatch an async action?</h2>\n<p><img src=\"https://3.bp.blogspot.com/--Db-esueXgI/VdWCSwMewZI/AAAAAAAATRs/mfthDsaKuwc/s1600/kid-crying-interview.gif\" alt=\"cri\"></p>\n<hr>\n<h2>The Problem</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncCall</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'ASYNC_ACTION'</span>\n      data<span class=\"token operator\">:</span> resultFromServer\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">someAsyncCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>What'll be sent to our store?</p>\n<hr>\n<h2>Nothing</h2>\n<ul>\n<li>Our async call wouldn't finish by the time that dispatch will send whatever over.</li>\n<li>Monkeypatch solution 1:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeAsyncDispatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'ASYNC_ACTION'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token operator\">:</span> resultFromServer<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">makeAsyncDispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Kinda...but its different from our normal method of calling dispatches (we're passing it into a function rather than calling it directly.</li>\n</ul>\n<hr>\n<h2>Brief note about redux middleware</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">thunk</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">store</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Add middleware to store</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>finalReducer<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddlewware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncCall</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'ASYNC_ACTION'</span>\n      data<span class=\"token operator\">:</span> resultFromServer\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>You can use a formal <code class=\"language-text\">thunk</code> from the <code class=\"language-text\">redux-thunk</code> library</li>\n</ul>\n<hr>\n<h2>React-Router Reacs Only</h2>\n<ul>\n<li>Redux Break</li>\n<li>\n<p>Big Picture:</p>\n<ul>\n<li>We covered the notion of an API Server</li>\n<li>How is it diff than regular server?</li>\n<li>How do we change pages?</li>\n<li>\n<p>Option 1:</p>\n<ul>\n<li>Create a compile bundle for each page of components, put in separate directories, and serve those</li>\n<li>Cons, lots of build steps, painful dev time, more bundles to keep track of.</li>\n<li>Pros...lol</li>\n</ul>\n</li>\n<li>\n<p>Option 2:</p>\n<ul>\n<li>Keep our single bundle</li>\n<li>Have the browser somehow read what's in the URL bar + be able to change it</li>\n<li>Mount and unmount components as you change the URL bar!</li>\n<li>This is React Router</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Example</h2>\n<p>In a main app component:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>navigationBar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This will always be here</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/some-route<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>someComponent<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/person/:id?<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>someComponent<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"date":"February 27, 2019","path":"/lectures/9-redux","title":"Redux","hidden":false}}},"pageContext":{}},"staticQueryHashes":["2277278352","3649515864"]}