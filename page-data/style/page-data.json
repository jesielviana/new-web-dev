{"componentChunkName":"component---src-templates-mdx-js","path":"/style","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/style\",\n  \"date\": \"2019-04-07\",\n  \"metaTitle\": \"Style Guide\",\n  \"title\": \"JavaScript Style Guide\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Code Style\"), mdx(\"p\", null, \"Code style is extremely important when developing code that you hope to last\\nlonger than its first writing. This is especially important with JavaScript\\nbecause the interpreter is very tolerant and will allow a great deal of\\nsyntactic mistakes to pass undetected when code is executed. JS developers must\\nexhibit great discipline in writing idiomatic code that is easily readable to\\nall other developers.\"), mdx(\"p\", null, \"Because of this, we're going to be adhering to a style guide for code written in this class. If you ever go out and write code professionally, you would do\\nwell to adhere to a structured style guide as well.\"), mdx(\"h2\", null, \"Basics\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Indentation\"), \": Use spaces, not tabs. 2 or 4 spaces.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Line Length\"), \": Avoid lines longer than 100 characters.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Comments\"), \": Be generous with comments, but try to describe more about \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"why\"), \"\\ncode is the way it is, and the assumptions it makes, rather than \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"how\"), \" it does things. JavaScript is an expressive enough language (with first class functions, etc.) that you can write very readable code that expresses intent properly.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Whitespace\"), \": Most tokens should be separated by whitespace. Specifically, you should always have a space before and after your infix operators (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&&\"), \", etc). Also use whitespace between the function keyword and its arguments:\"), mdx(Code, {\n    code: \"\\nvar parseInt = function (string, radix) {\\n  ...\\n};\\n\",\n    language: \"javascript\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if / else\"), \" blocks and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for / while\"), \" loops should always be split into lines,\\nas per the K&R standard (aka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"http://c2.com/cgi/wiki?OneTrueBraceStyle\"\n  }, \"The One True Brace Style\")), \"):\"), mdx(Code, {\n    code: \"\\nif (predicate) {\\n  ...\\n} else {\\n  ...\\n}\\n \\nfor (var i = 0; i < len; i++) {\\n  ...\\n}\\n \\nwhile (condition) {\\n  ...\\n}\\n\",\n    language: \"javascript\",\n    mdxType: \"Code\"\n  }), mdx(\"h2\", null, \"Functions\"), mdx(\"p\", null, \"Functions should generally be declared by assigning to an identifier:\"), mdx(Code, {\n    code: \"\\nvar parseInt = function (string, radix) {\\n  ...\\n};\\n\",\n    language: \"js\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, \"If you use an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"identifier\"), \" with a function expression, it provides the added\\nbenefit of showing up with a proper identifier in stack traces \", \"\\u2014\", \" but this is not strictly necessary.\"), mdx(Code, {\n    code: \"\\nvar parseInt = function parseInt (string, radix) {\\n  ...\\n};\\n\",\n    language: \"js\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Do not\")), \" use a function \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"definition\"), \" syntax like the following example, because the scoping works slightly differently \\u2013 this\\nfunction is \\\"hoisted\\\" to the top of its scope while the above \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"function\\nexpression\"), \" syntax means that a function is only available when its expression\\nis evaluated (and stored to that variable).\"), mdx(Code, {\n    code: \"\\n// Don't use this syntax!\\nfunction parseInt (string, radix) {\\n  ...\\n};\\n\",\n    language: \"js\",\n    mdxType: \"Code\"\n  }), mdx(\"h2\", null, \"Operators\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Do not\")), \" use the double-equal \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"==\"), \". It does type coercion and is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.impressivewebs.com/why-use-triple-equals-javascipt/\"\n  }, \"generally recognized as a bad idea\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Do\")), \" use the triple-equal \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"===\"), \", which does \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"strict equality\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Do not\")), \" perform assignments in the conditional of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"while\"), \" statements. It is easy to mistake an assignment like this one...\"), mdx(Code, {\n    code: \"if (a = b) { ... }\",\n    language: \"js\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, \"...for an equality check like this one:\"), mdx(Code, {\n    code: \"if (a === b) { ... }\",\n    language: \"js\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Do not\")), \" use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eval\"), \" in your programs. Similarly, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"do not\")), \" use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Function\"), \" constructor or pass strings to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setInterval\"), \". We'll never ask you to do these weird hacky sorts of things - this class is about encouraging \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"good\"), \" code.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Do not\")), \" use bitwise operators (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"|\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~\"), \") in place of logical operators (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&&\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"||\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!\"), \").\"), mdx(\"p\", null, \"Similarly, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"do not\")), \" use the \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"with\"), \" statement\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Do not\")), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea\"\n  }, \"use the \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"for-in\"), \" loop for arrays \"), \". You can use if for objects, but this isn't necessary either - if you need to iterate over an object's properties, you should probably use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Object.keys\"), \".\"), mdx(\"h2\", null, \"Code Cruft\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Do not\")), \" leave debugging-type functions (like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alert\"), \") in your finished code. The obvious exception is in cases where writing to the console, or displaying an alert message, is the intended function of the code.\"), mdx(\"h2\", null, \"IIFEs\"), mdx(\"p\", null, \"Finally, you may want to include an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\"\n  }, \"Immediately Invoked Function Expression (IIFE)\"), \" in your JavaScript files to avoid polluting the global namespace - but this is not strictly necessary.\"), mdx(Code, {\n    code: \"\\n(function() {\\n  // do stuff\\n  \\n  module.exports = {\\n    // export stuff\\n  }\\n})()\\n\",\n    language: \"js\",\n    mdxType: \"Code\"\n  }), mdx(\"h2\", null, \"ESLint\"), mdx(\"p\", null, \"In order to do ensure that your JavaScript submissions adhere to this style guide, we will be using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://eslint.org/\"\n  }, \"ESLint\"), \". You should definitely check your code style with ESLint before submitting - see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"build/lectures/lecture1.pptx\"\n  }, \"Lecture 1\"), \" for instructions on how to use ESLint.\"), mdx(\"p\", null, \"We will provide you with a specific \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc\"), \" file for each homework, but they will all have these rules (which are among the best-accepted and most general JavaScript style guidelines).\"), mdx(Code, {\n    code: \"\\n{\\n  \\\"env\\\": {\\n    \\\"node\\\": true\\n  },\\n  \\\"rules\\\": {\\n    \\\"brace-style\\\": [2, \\\"1tbs\\\"],\\n    \\\"camelcase\\\": 0,\\n    \\\"no-alert\\\": 2,\\n    \\\"no-bitwise\\\": 2,\\n    \\\"no-empty\\\": 2,\\n    \\\"no-ex-assign\\\": 2,\\n    \\\"no-lonely-if\\\": 2,\\n    \\\"no-loop-func\\\": 2,\\n    \\\"no-mixed-spaces-and-tabs\\\": 2,\\n    \\\"no-tabs\\\": 2,\\n    \\\"no-underscore-dangle\\\": 0,\\n    \\\"no-unused-vars\\\": 0,\\n    \\\"quote-props\\\": [2, \\\"as-needed\\\"],\\n    \\\"space-before-function-paren\\\": [2, \\\"never\\\"],\\n    \\\"quotes\\\": [2, \\\"single\\\", \\\"avoid-escape\\\"],\\n    \\\"space-before-blocks\\\": 2,\\n    \\\"space-infix-ops\\\": 2,\\n    \\\"strict\\\": 0\\n  }\\n}\\n\",\n    lang: \"js\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, \"The specific definitions for these rules can be found in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://eslint.org/docs/rules/\"\n  }, \"the ESLint rules documentation.\"), \" Including them in your final project would probably be a good idea as well - it could save you a great deal of trouble down the line!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"07/04/2019","due":null,"path":"/style","hasZip":null,"title":"JavaScript Style Guide","metaTitle":"Style Guide","hidden":null}}},"pageContext":{}},"staticQueryHashes":["2277278352","3649515864"]}