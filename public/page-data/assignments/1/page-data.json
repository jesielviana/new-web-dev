{"componentChunkName":"component---src-templates-mdx-js","path":"/assignments/1","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/assignments/1\",\n  \"date\": \"2020-01-19\",\n  \"due\": \"2020-01-29\",\n  \"title\": \"Homework 1: Finger Exercises\",\n  \"hidden\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this homework, you will familiarize yourself with JavaScript syntax by writing some useful functions: a few array helpers, mixins for a shopping cart, some higher-order functions, and a function for stringifying JavaScript objects.\"), mdx(\"h3\", null, \"Before starting this assignment\"), mdx(\"p\", null, \"Review \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/lectures/1\"\n  }), \"Lecture 1\"), \". You may also find the resources on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/lectures\"\n  }), \"lecture page\"), \" helpful.\"), mdx(WarningMessage, {\n    showIcon: true,\n    mdxType: \"WarningMessage\"\n  }, \"This homework deliberately uses a dated version of JS. The linter/build will not allow arrow functions, \", mdx(\"code\", {\n    style: {\n      background: BORDER\n    }\n  }, \"const\"), \" or \", mdx(\"code\", {\n    style: {\n      background: BORDER\n    }\n  }, \"let\"), \", or modern data structures like \", mdx(\"code\", {\n    style: {\n      background: BORDER\n    }\n  }, \"Set()\"), \". Save using these lovely JS improvements for later in the class :)\"), mdx(\"h2\", null, \"Getting Started\"), mdx(\"p\", null, \"This homework is written in NodeJS, which is a server-side implementation of JavaScript. It's like Ruby, Python, or other scripting languages: you write the code in plain-text files and then run them with the console command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \".\"), mdx(\"p\", null, \"The first thing you'll need to get started is NodeJS. Follow the instructions \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/notes/installing-nodejs\"\n  }), \"here\"), \" to download and install Node using NVM. Once finished, you can check that you've installed Node correctly by running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node --version\"), \" from your terminal. It should print a string like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v0.12.3\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"You must use NVM to install NodeJS. Do not use the installer from the NodeJS site, or your favorite package manager, or any other method. These tend to cause problems after a while, especially the day before a homework is due.\")), mdx(\"p\", null, \"Once you've got Node on your computer, you'll need to install the dependencies for the homework. From your homework directory, run:\"), mdx(Code, {\n    code: \"npm install\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, \"This should display a few lines of text about fetching packages, indicating that dependencies have been installed successfully. You should now be able to run the homework with:\"), mdx(Code, {\n    code: \"node exercises.js\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, \"Although it won't do very much since you haven't completed it yet!\"), mdx(\"h2\", null, \"Running ESLint\"), mdx(\"p\", null, \"Using a linter in JavaScript is generally very useful, because it'll catch typos and syntax errors that our meager human minds can easily overlook. In CIS 197, passing our linter is also a significant chunk of your homework grade! Luckily, it's extremely easy to run ESLint on your code - we'll provide you with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc\"), \" file in each homework (which defines the style rules that your homework must follow) and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Gulpfile.js\"), \" (which will check all of your modified files for errors). I highly recommend linting your code each time you make changes, before you run it - it'll stop you from wasting time over silly errors.\"), mdx(\"p\", null, \"To install Gulp on your computer, simply run:\"), mdx(Code, {\n    code: \"npm install -g gulp\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, \"Then to check your files, run:\"), mdx(Code, {\n    code: \"gulp eslint\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, \"Any errors or warnings will be printed to the console, along with a line number.\"), mdx(\"h2\", null, \"Completing the Homework\"), mdx(\"p\", null, \"Obviously, this is the hard part! You'll find that the homework files themselves contain instructions on how to complete the different parts. If you need clarification, you can ask on Piazza.\"), mdx(\"p\", null, \"Of course, you'll want a way to debug your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exercises.js\"), \" functions, since they're unlikely to be perfect the first time. The best way to do this is to create a new file, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"testHW1.js\"), \", and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"require\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exercises.js\"), \" from that file. This is done with a simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"require\"), \" statement, as in the example below:\"), mdx(Code, {\n    code: \"\\nvar exercises = require('./exercises')\\n \\n// Test the sum function\\nvar sum = exercises.arrayMethods.sum\\nconsole.log(sum([1, 2, 3, 4])) // Expect 10\\n\",\n    js: true,\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, \"Run this test file with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node testHW1.js\"), \".\"), mdx(\"h2\", null, \"Submitting the Homework\"), mdx(\"p\", null, \"We will be using Gradescope this semester (if all goes well with homework 1). To join the course sign up/log into gradescope.com. Refer to Piazza for the course code. Note, in order to submit the assignment, you MUST register with the course code on Piazza. The only file you need to submit is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"exercises.js\"), \". Any other files are extraneous (e.g. feedback.js, package.json, .estlintrc, etc.).\"), mdx(\"p\", null, \"Note, you have infinite submissions. The autograded portion is scaled to 15.0 points (per our syllabus) and manual/autograded style will be added later. Note that the autograded tests and style are subject to adjustment based on the discretion of the TAs (i.e. if we see that you're just getting a bunch of points wrong because of some simple syntax errors, we will let you know about it and limit the amount of points we will cut). Manually graded style for HW1 will be 5/5. However, pay attention to your comments.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"January 19, 2020","due":"Wednesday, January 29, 2020","path":"/assignments/1","hasZip":null,"title":"Homework 1: Finger Exercises","metaTitle":null,"hidden":false}}},"pageContext":{}},"staticQueryHashes":["2277278352","3649515864"]}