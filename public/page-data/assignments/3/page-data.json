{"componentChunkName":"component---src-templates-mdx-js","path":"/assignments/3","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/assignments/3\",\n  \"date\": \"2020-01-29\",\n  \"due\": \"2020-02-05\",\n  \"title\": \"Homework 3: Object Oriented JavaScript\",\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Note that this homework will be much lighter than last week's.\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"Snake is a fun game that used to be on Nokia phones back in the day. Here's a GIF demo:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cis-197.s3.amazonaws.com/snake.gif\",\n    \"alt\": \"The final product\"\n  }))), mdx(\"p\", null, \"Using object-oriented JavaScript, you'll write the actual logic that powers the Snake game. We've already written the front-end for you, so that when you finish the assignment, you'll have a beautiful game of Snake you can play.\"), mdx(\"h1\", null, \"Overall Architecture\"), mdx(\"p\", null, \"There are 3 major components to this application:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The HTML file that will be rendered by your browser (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"index.html\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The JavaScript that makes the front-end look like Snake (everything in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"frontend-api\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The game logic (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"index.js\"), \"). This handles things like (but not limited to):\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Handling when the user presses keys on the keyboard\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What happens when the snake collides into a wall\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What happens when the snake eats \\\"food\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What happens when the snake collides into its own body\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How the snake should be initialized and then move\")))), mdx(\"p\", null, \"You'll notice that in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" , we import a couple of things from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frontend-api/api.js\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dispatchChangeGameState\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This function takes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"snake\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"food\"), \" as parameters. When this function is executed, it takes the positions of the snake and the food and maps it to a 2d array. This 2d array is then rendered by our front-end code.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dispatchStartGame\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This function should be executed whenever the game is \\\"started,\\\" or rather when the snake starts moving.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dispatchEndGame\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This function should be executed whenever the game is \\\"ended,\\\" or rather when the snake stops moving (has died).\")))), mdx(\"p\", null, \"We also import a few things from\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frontend-api/constants.js\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"width\"), \" - the width of the game board\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"height\"), \" - the height of the game board\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"frameRate\"), \" - the game state will be updated every \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"frameRate\"), \" milliseconds\")), mdx(\"h2\", null, \"High level game flow\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The game is started by the user pressing the space key on their keyboard\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The game begins to update the state every \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"frameRate\"), \" milliseconds.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"updating the state\\\" consists of moving the snake in the right direction, detecting if the snake has collided with either the wall, itself, or food, and then triggering different events\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The game stops when the snake dies, or the user clicks \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"reset\"))), mdx(\"h1\", null, \"Before you start coding\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm install\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm run dev\"), \" and let that boi keep running while you complete the assignment\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"You'll be able to see the updates that your code makes by continuously visiting \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"localhost:3000\"), \" in your web-browser.\")), mdx(\"h1\", null, \"The Snake Class\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Todo\"), \": Implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"constructor\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"move\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"changeDirection\")), mdx(\"p\", null, \"The Snake class has three functions (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"constructor\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"move\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"changeDirection\"), \" ) and two properties (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"direction\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body\"), \"). We describe these functions below.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"constructor\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"constructor\"), \" takes in width and height parameters (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"w\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h\"), \"). It then initializes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.body\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.direction\"), \".\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.body\"), \" is an array of objects that each look like\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"{ x: some_x_value, y: some_y_value }\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \\\"head\\\" of the snake is the first element in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.body\"), \" and the tail is the last element in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.body\"), \". The head of the snake should be located at\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"{ x: Math.floor(w / 2), y: Math.floor(h / 2) }\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Finally, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.body\"), \" should be initialized to have length 5. So, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"w\"), \" is 30 and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h\"), \" is 30, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.body\"), \" should be\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"[\\n  {x: 15, y: 15},\\n  {x: 15, y: 16},\\n  {x: 15, y: 17},\\n  {x: 15, y: 18},\\n  {x: 15, y: 19}\\n]\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.direction\"), \" should be initialized to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UP\"), \", which a constant imported from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frontend-api/constants.js\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The constructor should bind the functions \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"move\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"changeDirection\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \".\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"changeDirection\"), \" changes the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.direction\"), \" to either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RIGHT\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LEFT\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UP\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DOWN\"), \", depending on the value of the parameter passed in. If the parameter \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"direction\"), \" is neither \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RIGHT\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LEFT\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UP\"), \", nor \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DOWN\"), \", you should throw an Error with a useful error message.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"move\"), \" takes in a boolean parameter \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grow\"), \". Every \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frameRate\"), \" milliseconds, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.move\"), \" is executed by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Game\"), \" object to move the snake. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"move\"), \" updates \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.body\"), \" to move in the direction of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.direction\"), \". If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grow\"), \" is truthy, then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.body\"), \" should increase by 1 unit. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grow\"), \" is falsy, then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake.body\"), \" should not increase and simply move in the correct direction. To shed some light on what I mean when \\\"the body moves in the correct direction,\\\" consider the following example:\"))), mdx(Code, {\n    code: \"\\n// Pretend width and height are initialized to be 30 and 30 respectively\\nconst snake = new Snake(width, snake)\\n \\n/*\\nCurrently, snake.direction should be \\\"UP\\\" and snake.body should look like:\\n[\\n  {x: 15, y: 15},\\n  {x: 15, y: 16},\\n  {x: 15, y: 17},\\n  {x: 15, y: 18},\\n  {x: 15, y: 19},\\n]\\n*/\\n \\nsnake.move(false)\\n \\n/*\\nsnake.body should now look like:\\n[\\n  {x: 15, y: 14},\\n  {x: 15, y: 15},\\n  {x: 15, y: 16},\\n  {x: 15, y: 17},\\n  {x: 15, y: 18}\\n]\\n*/\\n \\nsnake.move(true)\\n \\n/*\\nsnake.body should now look like:\\n[\\n  {x: 15, y: 13},\\n  {x: 15, y: 14},\\n  {x: 15, y: 15},\\n  {x: 15, y: 16},\\n  {x: 15, y: 17},\\n  {x: 15, y: 18},\\n]\\n*/\\n \\nsnake.changeDirection(RIGHT)\\n \\n// snake.direction is now RIGHT\\n \\nsnake.move(false)\\n \\n/*\\nsnake.body is now:\\n[\\n  {x: 16, y: 13},\\n  {x: 15, y: 13},\\n  {x: 15, y: 14},\\n  {x: 15, y: 15},\\n  {x: 15, y: 16},\\n  {x: 15, y: 17},\\n]\\n*/\\n\",\n    lang: \"js\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, \"Before you move past this part, ensure that you pass all the test cases that begin with the word \\\"Snake.\\\"\"), mdx(\"h1\", null, \"The Game Class\"), mdx(\"p\", null, \"The Game class has eight functions (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"constructor\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reset\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spawnFood\"), \" , \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"checkCollision\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shouldGrow\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateGameState\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startGame\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"endGame\"), \") and seven properties (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"width\"), \" , \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"height\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"playing\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frameRate\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keyPressed\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gameInterval\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"food\"), \"). We've already written \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"constructor\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reset\"), \".\"), mdx(\"h2\", null, \"Instance Variables\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"width\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"height\"), \" are the dimensions of the game board.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"playing\"), \" is a boolean that denotes whether or not the snake is moving. Initially, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"playing\"), \" is false; once the game is started, then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"playing\"), \" is set to true. When the snake dies, the game is over and then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"playing\"), \" is set to false.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snake\"), \" is an instance of the Snake class.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frameRate\"), \" is a Number denoting the number of milliseconds that should pass between state refreshes\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keyPressed\"), \" denotes whether or not the user has pressed a key before the snake has moved.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gameInterval\"), \" is the ID of an interval that updates the game's state every \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frameRate\"), \" milliseconds. Learn more about intervals \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval\"\n  }), \"here.\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"food\"), \" is an object that has keys \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" denoting the position of the Snake's food at different points in the game. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"food\"), \" is the little red square that moves around as the game progresses (play the demo if you don't know what I'm talking about).\"), mdx(\"h2\", null, \"Functions\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Todo:\"), \" write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spawnFood\"), \" , \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"checkCollision\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shouldGrow\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateGameState\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startGame\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"endGame\"), \". These functions should be written so that they satisfy the following specifications.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"constructor\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This function initializes instance variables, binds all Game's functions to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"this\"), \" context, creates a food object (initialized to a random location on the grid via \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"this.spawnFood()\"), \"), and communicates the initial game state to the frontend code via \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dispatchChangeGameState(this.snake, this.food)\"), \".\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spawnFood\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is the first function you will write. Its only purpose is to assign a random location (object with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"y\"), \" keys) to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"food\"), \" instance variable. Remember that \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x\"), \" must be between 0 and the width of the board. Similarly, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"y\"), \" must be between 0 and the height of the game board.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don't worry about the food spawning at the same location as the body of the snake.\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startGame\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You'll notice that we've already written a line \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dispatchStartGame\"), \". This tells the frontend that the game has begun. You still need to do a couple of things:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"playing\"), \" variable to true\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gameInterval\"), \" to be a new interval which executes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"updateGameState\"), \" every \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"frameRate\"), \" milliseconds\")))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"endGame\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This function should set the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"playing\"), \" variable to false and clear the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gameInterval\"), \". You can clear intervals by using the built-in \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"clearInterval\"), \" function.\"))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shouldGrow\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"snake\"), \"'s head is at the same location as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"food\"), \", return \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \". Else, return \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \".\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"checkCollision\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is going to be a bit of a meaty function to write \\uD83E\\uDD2A\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This function returns \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" if the snake's head has collided either with its own body or with any 'wall' and returns \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \" otherwise. Remember that the head of the snake is the first element in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"snake.body\"), \".\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateGameState\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is the function that is executed every \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"frameRate\"), \" milliseconds\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The function should execute the following instructions in the following order\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Find out if the snake should grow, given the current positions of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"snake\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"food\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Appropriately execute \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"snake.move(true or false)\"), \" depending on the result of the previous instruction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"keyPressed\"), \" to false (we'll see why, when we write the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"OnKeyDown\"), \" functions)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Determine whether the game should end by checking whether or not a collision has occurred (hint: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"checkCollision\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If a collision has occurred, stop execution. Otherwise, continue\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the snake grew, that means that it \\\"ate\\\" the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"food\"), \". So, we should change the location of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"food\"), \" (hint: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spawnFood\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The last thing that should happen is the line we've provided: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dispatchChangeGameState(this.snake, this.food)\"))))), mdx(\"p\", null, \"Before you continue, make sure you pass all the test cases that begin with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Game\"), \".\"), mdx(\"h2\", null, \"Build OnKeyDownGenerator function\"), mdx(\"p\", null, \"We need to be able to listen for user events (when users press different keys on their keyboards). We only really care if they press the following keys: the \\\"r\\\" key, the space bar, the up arrow key, the down arrow key, the left arrow key, and the right arrow key. The \\\"r\\\" key enables users to reset the game. Pressing the space bar begins the game. The arrow keys do what you'd expect (play the demo if you don't understand this part).\"), mdx(\"p\", null, \"Notice that we've already written some of the code for you, including handling the press of the \\\"r\\\" key and the press of the space bar.\"), mdx(\"p\", null, \"Remember how we talked about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"game.keyPressed\"), \" earlier? This boolean helps us keep track of whether or not the user has already pressed a key before the snake has updated its position. So, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"game.keyPressed\"), \" is true, then we'll want to stop executing the function. Otherwise, we'll want to continue executing the function.\"), mdx(\"p\", null, \"You now only have to worry about when the user presses the arrow key. Whenever a user presses an arrow key (and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"game.keyPressed\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \"), then we'll want to first set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"game.keyPressed\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" since the user has just pressed a key AND we'll want to change the direction of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"game.snake\"), \" appropriately (hint: the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"changeDirection\"), \" function).\"), mdx(\"p\", null, \"Be sure that you pass all the test cases and that you can play snake :)\"), mdx(\"h2\", null, \"Submitting to Gradescope\"), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run lint\"), \" to make sure you have no linter errors before submitting.\"), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run zip\"), \" and submit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"files.zip\"), \" file that's made to Gradescope. On Gradescope submit all the files that gets outputted on the upload interface.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"January 29, 2020","due":"Wednesday, February 05, 2020","path":"/assignments/3","hasZip":null,"title":"Homework 3: Object Oriented JavaScript","metaTitle":null,"hidden":false}}},"pageContext":{}}}