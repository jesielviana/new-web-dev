{"componentChunkName":"component---src-templates-mdx-js","path":"/assignments/8","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/assignments/8\",\n  \"date\": \"2020-01-19\",\n  \"due\": \"2020-03-11\",\n  \"title\": \"Homework 8: Reddit AMA Chrome Extension\",\n  \"hidden\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Before Starting on this Assignment\"), mdx(\"p\", null, \"Review \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/lectures/9\"\n  }), \"Lecture 9\"), \". You may also want to check out the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sibnerian/example-extension\"\n  }), \"sample code from lecture\"), \".\"), mdx(\"p\", null, \"Review notes on jQuery and DOM manipulation if needed. Also if needed check out Chrome's \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.chrome.com/extensions/getstarted\"\n  }), \"Getting Started\"), \".\"), mdx(\"p\", null, \"While this may seem obvious, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"YOU MUST HAVE CHROME\"), \".\"), mdx(\"h2\", null, \"Our Chrome Extension\"), mdx(\"p\", null, \"Chrome extensions are built with the same tools as websites: HTML, CSS, and Javascript.\"), mdx(\"p\", null, \"We'll be making an extension that runs on IAmA Reddit posts and hides all\\ncomment chains that don't include a comment by the original poster (OP). If you\\nare unfamiliar with IAmA's you can check out their structure with\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.reddit.com/r/IAmA/comments/18bhme/im_bill_gates_cochair_of_the_bill_melinda_gates/\"\n  }), \"Bill Gate's IAmA\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.reddit.com/r/IAmA/comments/16mq0g/iamarnold_ask_me_anything/\"\n  }), \"Arnold Schwarzenegger's\"), \", or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.reddit.com/r/IAmA/comments/z1c9z/i_am_barack_obama_president_of_the_united_states/\"\n  }), \"the President's\"), \". The intent is to reduce the noise and focus on the questions that the OP has answered. The end product will also allow the user to make some small configurations.\"), mdx(\"p\", null, \"The end product should function as follows:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when an IAmA loads, all unanswered comment chains should be hidden (the filtering initially applies only to the OP).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the mechanism to hide the comments should \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"only\"), \" apply to IAmA pages (\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.reddit.com/r/IAmA/comments/blah_blah_blah\"\n  }), \"http://www.reddit.com/r/IAmA/comments/blah_blah_blah\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the extension icon should provide a popup with:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a button to apply the comment filtering\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a button to remove the comment filtering\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a text input that determines which username to filter by\")))), mdx(\"p\", null, \"This homework will be mostly in small steps, and it would be prudent not to jump around.\"), mdx(\"h3\", null, \"Loading Your Extension\"), mdx(\"p\", null, \"To actually use your extension in Chrome, you first have to load it. Go to the\\nExtensions page (chrome://extensions/) and check Developer Mode in the top\\nright corner. Click Load Unpacked Extensions and find the homework directory.\\nMake sure the extension is enabled. Whenever you change any of the source\\nfiles, you need to return to this page and reload the extension before the\\nchanges take affect.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"The Manifest File\"), mdx(\"p\", null, \"Every chrome extension needs a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"manifest file\"), \" to declare its meta-information.\"), mdx(\"p\", null, \"This is in the form of a JSON file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"manifest.json\"), \", that has the structure:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n    \\\"manifest_version\\\": 2,\\n\\n    \\\"name\\\": \\\"IAmA Parser\\\",\\n    \\\"description\\\": \\\"Removes all comment chains from Reddit post without OP\\\",\\n\\n    \\\"version\\\": \\\"1.0\\\",\\n\\n    \\\"background\\\": {\\n        \\\"scripts\\\": [ \\\"background.js\\\" ],\\n        \\\"persistent\\\": false\\n    },\\n\\n    \\\"permissions\\\": [\\n        // Your permissions here, e.g. declarativeContent\\n    ],\\n\\n    ...\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TODO\"), \": The permissions array declares what resources or APIs your app can use. You should begin by adding in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"declarativeContent\"), \" permission which is used in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background.js\"), \" to add the extension icon on the right pages.\"), mdx(\"p\", null, \"As we continue you will add new elements to the manifest as well.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Enabling Content Scripts\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"manifest.json\"))), mdx(\"p\", null, \"In order to inject JavaScript into a page as it loads, we must use content scripts. Content scripts can be JavaScript or CSS and are declared in the manifest file. You will inject two JavaScript files (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"comment-parser.js\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.js\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jquery.min.js\"), \") and one CSS file (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parse.css\"), \"). We have provided \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parse.css\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.js\"), \" which you should quickly look over (both are only a couple lines) and jQuery. These must all be declared in the manifest as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"content_scripts\\\": [\\n    {\\n        \\\"matches\\\": [ \\\"...\\\" ],\\n        \\\"css\\\": [ \\\"...\\\" ],\\n        \\\"js\\\": [ \\\"...\\\" ]\\n    }\\n],\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"js\"), \" arrays should have the paths to the content script files, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"matches\"), \" is an array of URLs in which the scripts should be injected. For example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"http://www.facebook.com/*\\\"\"), \" would be all sites with the Facebook domain \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"only over HTTP\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"http://www.facebook.com/messages/*\\\"\"), \" would match anything on Facebook that had a path starting with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/messages/\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TODO\"), \": You'll need to write some matches for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"www.reddit.com\"), \". Keep in mind that the only paths you're interested in start with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/r/IAmA/comments/\"), \" - we're only filtering comment chains in /r/IAmA. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Be sure to include both 'http' and 'https' versions for your matches.\")), mdx(\"p\", null, \"Once you have added these, the next step is to actually write the JavaScript!\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Parsing Comments\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"content_scripts/comment-parser.js\"))), mdx(\"p\", null, \"To implement this extention we will \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" be using the Reddit API, but instead will be \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"adding classes to the elements in the page\"), \". The Reddit DOM is a bit odd (lots of divs have the class 'thing' for some reason?), so the work to find the comments and OP name is done in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.js\"), \" (which is provided). You will be writing the CommentParser which takes in its constructor a jQuery object that has all top level comment chains and the OP username as a string. You will implement two functions for CommentParser: parse, and filter.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TODO\"), \": Implement parse.\"), mdx(\"p\", null, \"Parse should take a username (String) as a parameter and apply the classes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"answered-chain\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unanswered-chain\"), \" to each top level comment based on whether the username shows up in the chain. Note that only one of these classes should ever be applied to a top level comment at a time!\"), mdx(\"p\", null, \"Also of note, the parse function should be desgined to be idempotent. This means calling it repeatedly with the same author argument should always yield the same overall result, and calling it with a new author argument should yield a result as if previous parse calls we never made.\"), mdx(\"p\", null, \"Usernames appear in links with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"author\"), \" class, and it is sufficient to simply \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"find\"), \" all authors within a top level comment. If you have any trouble with this part, we would encourage you to inspect an IAmA's DOM manually yourself with the Chrome console. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"If an empty string or no username is given to the parse function\"), \", parse using the OP's username as the default. Parse should also turn on the filtering.\"), mdx(\"p\", null, \"Finally, parse should call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.filter(true)\"), \" so that whenever a new username is parsed, comment chains without that username are immediately filtered.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TODO\"), \": Implement filter.\"), mdx(\"p\", null, \"Filter should take in a boolean indicating whether unanswered chains should be filtered, and appropriately toggle the visibility of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unanswered-chain\"), \"s. I.e. when the page first loads, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filter(true)\"), \" will be called in the parse method, and all unanswered chains should be hidden; if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filter(false)\"), \" is subsequently called they should be shown. This should not change any classes; rather, you should use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$topLevelComment.css('display', 'block')\"), \" to show comments, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$topLevelComment.css('display', none')\"), \" to hide comments.\"), mdx(\"p\", null, \"Please make sure you use prototypal inheritance when adding these functions to the CommentParser. If you need a refresher on how to add functions prototypically, see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"lectures/lecture2.html#18\"\n  }), \"the lecture slides\"), \" on the subject.\"), mdx(\"p\", null, \"To test this part, just run the extension on an IAmA page - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content-parser.js\"), \" should be loaded thanks to our manifest file. Any console logging done in CommentParser will go to the page's console.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Creating the Popup\"), mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"popup/popup.js\"))), mdx(\"p\", null, \"Once you have gotten the extension to successfully hide comment chains without an OP answer, its time to create a popup in order to toggle the visibility of these comments. The popup is simply an HTML document that has been given to you. In order for this HTML file to be used as a the popup, it must be declared in the manifest:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"page_action\\\": {\\n  \\\"default_popup\\\": \\\"popup/popup.html\\\",\\n  \\\"default_icon\\\": \\\"popup/icon.png\\\",\\n  \\\"default_title\\\": \\\"IAmA Parser\\\"\\n}\\n\")), mdx(\"p\", null, \"Also add the background script which we have provided for you:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"background\\\": {\\n  \\\"scripts\\\": [ \\\"background.js\\\" ],\\n  \\\"persistent\\\": false\\n},\\n\")), mdx(\"p\", null, \"Reload the extension. You should now see an icon on the right end of the URL that should show a popup when clicked. This icon should only show up for IAmA pages -- this is done in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background.js\"), \", which you should check out (but don't need to edit).\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TODO:\"), \" Implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"popup.js\"), \".\"), mdx(\"p\", null, \"Next, we'll add functionality to the input in the popup. When the 'REMOVE FILTER' button is pressed, the unanswered chains should show up (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.parser.filter(false)\"), \"); when the 'APPLY FILTER' button is pressed, the unanswered chains should be hidden (with a call to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.parser.filter(true)\"), \". For testing purposes, be sure that you use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"click\"), \" event listener for these. When a username is entered into the text input, the comments should be hidden based on which chains that username has been in - you'll want to call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.parser.parse(new_username)\"), \". For the text input, listen for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keydown\"), \" event. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"If you listen for the wrong events, you'll fail our tests even if things \\\"work,\\\" so please be careful.\")), mdx(\"p\", null, \"Note that any jQuery selecting done in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"popup.js\"), \" will only search popup.html.In order to run JS in the IAmA tab itself, the Chrome tab's executeScript must be used. You can find the full documentation on that \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.chrome.com/extensions/tabs#method-executeScript\"\n  }), \"here\"), \". Here are a few things to note, however:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The first parameter, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tabId\"), \", is optional, and you won't need it - the default is the active tab of the current window.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Your second parameter should just be a plain object with a 'code' property that specifies the code to run in the Reddit window (hint - you wrote a filter function earlier in this assignment).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The third parameter, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"callback\"), \", is also optional - you won't need it.\")), mdx(\"p\", null, \"This will require another permission -- the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"activeTab\"), \" permission -- so be sure to add this to the manifest.\"), mdx(\"p\", null, \"Now, everything should be working! You should be able to reload your extension and cruise around \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.reddit.com/r/IAmA/\"\n  }), \"reddit.com/r/IAmA\"), \", filtering the comment chains as you wish.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Submitting\"), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run lint\"), \" to make sure you have no linter errors before submitting.\"), mdx(\"p\", null, \"Now that you're done, make sure that everything works locally (and complies to\\nthis specification) before submitting to Gradescope.\"), mdx(\"p\", null, \"In order to submit, run the following command and submit the resulting zip\\nfile:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"zip -r files.zip content_scripts/comment-parser.js manifest.json popup/popup.js\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE:\"), \" this won't work if you use a name other than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"files.zip\"), \"!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"January 19, 2020","due":"Wednesday, March 11, 2020","path":"/assignments/8","hasZip":null,"title":"Homework 8: Reddit AMA Chrome Extension","metaTitle":null,"hidden":true}}},"pageContext":{}},"staticQueryHashes":["2277278352","3649515864"]}