{"componentChunkName":"component---src-templates-markdown-js","path":"/lectures/10-good-react","result":{"data":{"markdownRemark":{"html":"<p>class: center, middle, block-text</p>\n<h1>\"Good\" React</h1>\n<h2>SRP, React All the Things, and Qualifications</h2>\n<hr>\n<p>class: med</p>\n<h1>Agenda</h1>\n<ol>\n<li>\n<p>Single Responsibility Principle (SRP)</p>\n<ul>\n<li>What is \"good\" JS?</li>\n</ul>\n</li>\n<li>Why React is \"good\"</li>\n<li>Where is React useful</li>\n<li>How can we write better React code?</li>\n</ol>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>1. Single Responsibility Principle (SRP)</h1>\n<hr>\n<p>class: large</p>\n<h1>Single Responsibility Principle (SRP)</h1>\n<p>\"Every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class, module or function\"</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">Wikipedia</a></li>\n</ul>\n<hr>\n<p>class: med</p>\n<p>Doing everything in one method can get really, really long. Imagine if we want to do anything more than this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/new'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>username <span class=\"token operator\">||</span> username<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">...</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> success<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> user<span class=\"token operator\">:</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> status\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">...</span>\n          status <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">else</span> <span class=\"token operator\">...</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> <span class=\"token string\">'Something borko'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>class: med</p>\n<h1>Purely-JS helper functions</h1>\n<p>Easier to read, easier to test, easier to reuse:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Helper functions...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleCreateNewUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateUserInput</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createUserInDatabase</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">handleSendResponse</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/new'</span><span class=\"token punctuation\">,</span> handleCreateNewUser<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h1>So what can we do</h1>\n<p>Harder in the shortest of short runs, easier every step after:</p>\n<ul>\n<li>Handle errors in their own functions</li>\n<li>Frontend should only render</li>\n<li>Split out sending API requests</li>\n<li>Split out cleaning user input</li>\n<li>Split out interacting with databases, other services</li>\n<li>...</li>\n</ul>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>2. Why is React \"good\"?</h1>\n<hr>\n<h1>Why is React \"good\"?</h1>\n<ul>\n<li>Huge open source community, many packages → can build off of the work of others</li>\n<li>Used by big companies everywhere → not as susceptible to \"flavor of the week\" changes in JS frameworks</li>\n<li>React is an example of the SRP: it is only the \"view\" of MVC frameworks</li>\n<li>Can be used everywhere (more on this in a sec)</li>\n<li>Really good at handling events and state changes</li>\n<li>\"Good\" React can be really concise</li>\n</ul>\n<hr>\n<h1>React can take information and render it</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> bio <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"profile\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>bio<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h1>React can handle updates really easily</h1>\n<p>I don't think it's possible to get (non-negligibly) more concise than this in <em>any</em> framework:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> bio <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>score<span class=\"token punctuation\">,</span> setScore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"profile\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>bio<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>score<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If this is a little confusing, sorry...</p>\n<hr>\n<h1>That <code class=\"language-text\">useState</code> function is a funky thing called \"hooks\"</h1>\n<ul>\n<li>Hooks were added in React 16</li>\n<li>They make it easier to manage state without needing to create formal classes</li>\n<li>Hooks are an example of what React embraces as a framework: SRP and conciseness!</li>\n</ul>\n<hr>\n<p>class: small</p>\n<h2>This code does the same thing as the hooks example</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Profile</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> score<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updateScore <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateScore</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">updateScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> score <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> score<span class=\"token operator\">:</span> score <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> bio <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"profile\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>bio<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updateScore<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>score<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Profile</code></pre></div>\n<hr>\n<h1>Big idea here</h1>\n<p>React can be as robust as you need it to be</p>\n<ul>\n<li>Few state updates, rendering content → use Hooks, and \"functional components\"</li>\n<li>Taking user input, making many requests, dealing with many helper functions → use \"class components\"</li>\n</ul>\n<p>In my experience, React does a really good job of being lightweight compared to other frameworks.</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>3. Where is React useful?</h1>\n<hr>\n<h1>Where is React useful?</h1>\n<p>React is a framework for writing views. What these views actually are (HTML elements, iOS code, etc.) can be determined by a compiler from React to native code.</p>\n<p>Thus, we can use React just about everywhere:</p>\n<ul>\n<li>Dynamic web apps</li>\n<li>Fully \"static\" web apps</li>\n<li>Server side web apps</li>\n<li>Mobile apps</li>\n<li>Lightweight apps</li>\n<li>Progressive Web Apps</li>\n<li>Native (desktop) apps</li>\n</ul>\n<p>How is this possible?</p>\n<hr>\n<h1>Dynamic Web App: Bundler + React</h1>\n<p>Common options: either <a href=\"https://webpack.js.org/\">Webpack</a> or <a href=\"https://parceljs.org/\">Parcel</a> + React</p>\n<div style=\"text-align: center\">\n<img width=\"50%\" style=\"display: inline-block\" src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1548922329296/rJb10Xg44.png\"></img>\n</div>\n<p>General workflow:</p>\n<ol>\n<li>Server builds a JS bundle + has simple HTML</li>\n<li>Sends simple bundle + HTML to user's browser</li>\n<li>Browser renders the HTML, the HTML tells the browser to run the bundle</li>\n<li>Bundle injects React components onto the DOM</li>\n</ol>\n<hr>\n<h1>Issues with bundles</h1>\n<ul>\n<li>They can be really big, some users have poor internet connection or cheap phones</li>\n<li>Search engines, social media sites can only crawl static content</li>\n</ul>\n<p>→ bundles are only good for apps which don't have to be searched for or shared; normally, we send a user a bundle once they log into our app</p>\n<hr>\n<h1>Static Web App: Gatsby.js</h1>\n<div style=\"text-align: center\">\n<img width=\"50%\" style=\"display: inline-block\" src=\"https://miro.medium.com/max/1000/1*G9aVAI3aezHLw_JsiCfB1Q.jpeg\"></img>\n</div>\n<ol>\n<li>Developer writes React code</li>\n<li>Gatsby \"builds\" React code into optimized HTML + JS + CSS</li>\n<li>\n<p>Deploy static HTML + CSS + JS to static hosting place</p>\n<ul>\n<li>GitHub Pages, Amazon S3, Netlify, ...</li>\n</ul>\n</li>\n<li>Users directly download HTML + CSS + JS</li>\n</ol>\n<p>Additional perks: lazy images loading, preload pages, all out of the box → absurdly fast static sites which feel dynamic (shameless plug for <a href=\"https://www.cis.upenn.edu/~cis197/\">the course website</a>)</p>\n<hr>\n<h1>Server-Side Web App: Next.js</h1>\n<div style=\"text-align: center; margin-bottom: -2rem;\">\n<img width=\"50%\" style=\"display: inline-block\" src=\"https://i.ytimg.com/vi/Fnw3lNeH-XI/maxresdefault.jpg\"></img>\n</div>\n<ol>\n<li>Developer writes React code</li>\n<li>\n<p>Developer defines routes (like in Express) and matches them with React components</p>\n<ul>\n<li>Routes can pull data from API's in real time</li>\n</ul>\n</li>\n<li>Deploy as a server</li>\n<li>Server gets request from user, pulls data from APIs, pushes data into React template, generates HTML + CSS + JS</li>\n<li>Server sends HTML + CSS + JS to user</li>\n</ol>\n<p>Blurs the line between client and server</p>\n<hr>\n<h1>Mobile App: React Native</h1>\n<div style=\"text-align: center\">\n<img width=\"50%\" style=\"display: inline-block\" src=\"https://d117h1jjiq768j.cloudfront.net/images/default-source/blogs/2019/2019-10/the-react-native-sdk-for-kinvey-is-now-available_870_450.png?sfvrsn=296e1008_0\"></img>\n</div>\n<ol>\n<li>Developer writes React code</li>\n<li>Developer can test code on their Android or iOS phone during dev as a JS bundle</li>\n<li>React Native compiles JS bundle into iOS and Android packages</li>\n<li>Developer can submit packages to Apple Store and Google Play Store</li>\n<li>Users can download native iOS and Android apps</li>\n</ol>\n<hr>\n<h1>Lightweight App: Preact</h1>\n<div style=\"text-align: center\">\n<img width=\"50%\" style=\"display: inline-block\" src=\"https://ourcodeworld.com/public-media/articles/articleocw-59957f9652ac5.png\"></img>\n</div>\n<ol>\n<li>Developer writes React code (without a few bells and whistles)</li>\n<li>Developer should use fewer NPM dependencies</li>\n<li>Bundler builds (significantly smaller) bundler</li>\n<li>Server sends HTML + bundle to user</li>\n<li>More users can download bundle signficantly quicker, even on slow internet speeds or on small devices</li>\n</ol>\n<hr>\n<h1>Progressive Web Apps (PWA)</h1>\n<ul>\n<li>Developer configures app to be able to be downloaded and work offline</li>\n<li>User goes to website and chooses to download it to their phone</li>\n<li>User can open website directly from their phone without going to a browser</li>\n<li>User can run website even when it's offline (doesn't have to talk to server)</li>\n</ul>\n<hr>\n<h1>Native Desktop App: Electron</h1>\n<div style=\"text-align: center\">\n<img width=\"20%\" style=\"display: inline-block\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Electron_Software_Framework_Logo.svg/1200px-Electron_Software_Framework_Logo.svg.png\"></img>\n</div>\n<ol>\n<li>Developer writes React code</li>\n<li>Electron runs in Chromium JS engine as a native app</li>\n<li>Electron can build MacOS, Windows, Linux packages</li>\n<li>User can download package from their OS and run app from their desktop</li>\n</ol>\n<p>Atom, WhatsApp, Slack, VSCode, Microsoft Teams, others are all written in Electron.</p>\n<hr>\n<h1>Conclusion: React all the things</h1>\n<ul>\n<li>Developers can be more productive across platforms</li>\n<li>Can re-use logic and components between platforms</li>\n</ul>\n<p>BUT when you have a hammer, everything looks like a nail...</p>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>4. How can we write better React code?</h1>\n<hr>\n<h1>How can we write better React code?</h1>\n<p>Counter-intuitive solution: use React for as little as possible and only for what it is good at:</p>\n<ul>\n<li>Render data</li>\n<li>Handle events</li>\n</ul>\n<hr>\n<h1>Do not do this with React</h1>\n<ul>\n<li>Sending requests</li>\n<li>Sanitizing input</li>\n<li>Error handling</li>\n<li>Parsing request responses</li>\n</ul>\n<p>Instead, call purely-JS helper functions</p>\n<hr>\n<h1>To go back to our Express API handler from earlier</h1>\n<p>We receive the request and connect helper functions together. None of the nitty gritty work is done in our actual API handler method.</p>\n<p>We want our React components to do the same.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleCreateNewUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateUserInput</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createUserInDatabase</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">handleSendResponse</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: small</p>\n<h1>Simple, reusable components</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ErrorMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"error-message\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now in the top of all forms we can have:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ErrorMessage message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>Production code demo</h1>","frontmatter":{"date":"October 31, 2019","path":"/lectures/10-good-react","title":"\"Good\" React","hidden":false}}},"pageContext":{}},"staticQueryHashes":["2277278352","3649515864"]}