{"componentChunkName":"component---src-templates-markdown-js","path":"/lectures/8-react","result":{"data":{"markdownRemark":{"html":"<p>class: center, middle, block-text</p>\n<h1>Lecture 8</h1>\n<h2>ReactJS</h2>\n<hr>\n<p>class: med-large</p>\n<h1>Hype, hype, hype!</h1>\n<p>Why React?</p>\n<ol>\n<li>It uses a Virtual DOM to make page rendering blazing fast</li>\n<li>It reduces code complexity and increases readability</li>\n<li>It lets you write isomorphic code</li>\n<li>It makes it easy to write modular, reusable code</li>\n<li>It can be used to write web apps, mobile apps, and native desktop apps</li>\n<li>It's just JS, so it's quick to pick up</li>\n</ol>\n<p>In case this wasn't enough, it's maintained by the fine folk at Facebook and in\nuse all across Netflix (<a href=\"https://www.youtube.com/watch?v=g01dGsKbXOk\">60 FPS in the browser</a>),\nAirbnb, Khan Academy, NYT, Dropbox's\nCarousel, WhatsApp Web etc etc.</p>\n<hr>\n<p>class: x-large</p>\n<h1>Agenda</h1>\n<ol>\n<li>Why use React?</li>\n<li>JSX</li>\n<li>React</li>\n</ol>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>Why React?</h1>\n<hr>\n<h1>The V</h1>\n<p>Many frameworks use the <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">Model-View-Controller</a> design pattern.</p>\n<ul>\n<li><strong>Model:</strong> stores state (~ your database)</li>\n<li><strong>View:</strong> takes in state and renders updates to the user</li>\n<li><strong>Controller:</strong> manipulates state</li>\n</ul>\n<p>React is <em>only</em> the <strong>view</strong>, and it does that one job very, very well. You can use any state management library and model (database, local storage on the user's device to in memory objects, etc.) and React can handle showing information to the user.</p>\n<hr>\n<h1>Modularity</h1>\n<p>We build a React app by constructing a virtual DOM. Basically, a wrapper on normal DOM nodes that we wrote in HTML over the past few homeworks. We can then \"inject\" this virtual DOM into the user's browser by replacing an existing DOM node with our React-wrapped ones.</p>\n<p>This means you <em>could</em> have multiple React apps on a single page. Or, if you have an existing legacy app and you want to port it over to React, you can do it bit by bit without having to do a single rewrite.</p>\n<p>React apps can also be built in small chunks called <strong>components</strong> which we link together to build the full virtual DOM.</p>\n<hr>\n<h1>Performance</h1>\n<ul>\n<li>React keeps track of all <strong>properties</strong> and <strong>state</strong> (information) in your app</li>\n<li>It knows what virtual DOM nodes depend on what parts of this information</li>\n<li>When that information changes, instead of re-rendering the whole React app, it only re-renders <em>exactly</em> the subset of the DOM which depends on this information</li>\n<li>This saves a lot of compute on the user's device, meaning we can build very complex apps with complex state and know that React can handle it</li>\n</ul>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>JSX</h1>\n<hr>\n<p>class: med-large, smaller-code</p>\n<h2>JavaScript + HTML = JSX</h2>\n<p>JSX is a language extension that allows you to write HTML directly into your JavaScript files. Behind the scenes, it converts all the HTML text to React components.</p>\n<p>We use <code class=\"language-text\">ReactDOM.render</code> to render JSX. This function takes in a JSX object (which it renders) and a plain DOM element (which it renders the JSX inside of). Behind the sceens it's basically converting the React virtual DOM to an actual HTML DOM.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myDiv <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"this-is-jsx\"</span><span class=\"token operator\">></span>Greetings <span class=\"token keyword\">from</span> <span class=\"token constant\">JSX</span> world<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>myDiv<span class=\"token punctuation\">,</span> <span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h2>The Transformation</h2>\n<p>JSX maps directly into React syntax, so you never actually have to dig down into the React element-creation API. Here's a side-by-side comparison of the JSX syntax and the equivalent JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">One thing</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">another</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'list'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'One thing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'another'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>class: med-large</p>\n<h2>JSX Syntax</h2>\n<p>It's pretty much HTML, with a few key differences:</p>\n<ul>\n<li>Some common attribute names (like <code class=\"language-text\">class</code> and <code class=\"language-text\">for</code>) are reserved in JavaScript, so they have different names in JSX (<code class=\"language-text\">className</code> and <code class=\"language-text\">htmlFor</code>, respectively).</li>\n<li>Inline styles must be specified as objects, not strings. Properties are camelCased instead of kebab-case. Example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> fontSize<span class=\"token operator\">:</span> <span class=\"token string\">'12px'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">I'm some red text, size 12!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h2>Computed Expression Values</h2>\n<p>Any text inside curly braces (<code class=\"language-text\">{...}</code>) get's executed as JavaScript. This means we can put variables into our JSX at runtime. So we can use it as an easy <em>templating engine</em>.</p>\n<p>For example, often if a user is logged in we want to show a link to log out, but if the user is not logged in we want to show them a button to log in:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>window<span class=\"token punctuation\">.</span>loggedIn <span class=\"token operator\">?</span> <span class=\"token string\">'/logout'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>window<span class=\"token punctuation\">.</span>loggedIn <span class=\"token operator\">?</span> <span class=\"token string\">'Log Out'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Log In'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In reality, though, these values won't be global (defined on the window)—they'll actually come from a React component!</p>\n<hr>\n<p>class: med-large</p>\n<h2>Side Note: How JSX is transformed</h2>\n<p>We use bundlers to transpile modern JS code and things like JSX into JS code which not-cutting edge browsers can understand. Popular options are <a href=\"https://webpack.js.org/\">Webpack</a> and <a href=\"https://parceljs.org/\">Parcel</a>.</p>\n<p>With these bundlers and with pretty minimal config, we just use the same syntax that we're used to from Node in terms of importing packages from npm.</p>\n<div style=\"width: 100%; position: relative; display: flex; align-items: center;\">\n  <div style=\"flex: 1; width: auto;\">\n    <img alt=\"Parcel logo\" src=\"https://user-images.githubusercontent.com/19409/31321658-f6aed0f2-ac3d-11e7-8100-1587e676e0ec.png\" />\n  </div>\n  <div style=\"flex: 1; width: auto;\">\n    <img alt=\"Webpack logo\" src=\"https://jonathanmh.com/wp-content/uploads/2017/01/webpack-logo.png\" style=\"flex: 1; width: auto;\" />\n  </div>\n</div>\n<hr>\n<p>class: center, middle, block-text</p>\n<h1>React</h1>\n<hr>\n<p>class: large</p>\n<h1>Remember, React Puts the \"V\" in \"MVC\"</h1>\n<p>React is used as the View in a Model-View-Controller architecture. It's a really efficient way to update the DOM in response to state changes because it only re-renders things that have changed, rather than just re-rendering everything.</p>\n<p>React doesn't really have any utilities for modeling data. It can easily be used with any model framework.</p>\n<hr>\n<p>class: large</p>\n<h2>Components</h2>\n<p>Components are the basic building blocks of React. A React application is just a tree of components, each representing a different part of the DOM. Basically, we split the app up into a bunch of small, reusable pieces.</p>\n<p><img src=\"https://raw.githubusercontent.com/westeezy/ReactJS-Bootcamp/master/walkthroughs/slides/day2/img/react_component_hierarchy.png\" alt=\"React Component Illustration\"></p>\n<hr>\n<p>class: large</p>\n<h1>Before we proceed...</h1>\n<ul>\n<li>React is a fairly new framework and encourages modern syntax standards.</li>\n<li>Docs for React are written in <a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\">ES6</a>, the latest (but not yet fully supported!) syntax standard for JavaScript.</li>\n<li>ES6 adds in support for Classes, auto bound prototype functions and arrow syntax.</li>\n</ul>\n<hr>\n<p>class: large</p>\n<h1>Creating Components</h1>\n<p>There are two types of components, <strong>class components</strong> and <strong>functional components</strong>. We prefer functional components because they are simpler and tend to have more top-to-bottom readability.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HelloWorld</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We also often use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destructuring</a> for our props:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HelloWorld</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<hr>\n<h1>Class component</h1>\n<p>The equivalent of this as a class component would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that, within the class, we use <code class=\"language-text\">this</code> whereas <code class=\"language-text\">this</code> in the functional component would simply be the <code class=\"language-text\">window</code>. In the function case we are given the <code class=\"language-text\">props</code> as a parameter to our function.</p>\n<hr>\n<p>class: med-large</p>\n<h1>Rendering Components</h1>\n<p>Once we have a component, we can refer to it <em>as a JSX element</em> using its variable name. Here's an example of rendering a <code class=\"language-text\">HelloWorld</code> component with a name <code class=\"language-text\">&#39;CIS 197&#39;</code>. Make sure you name your components in PascalCase (camelCase with the first letter capitalized too):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// Here's the name prop from the previous slide!</span>\n  <span class=\"token operator\">&lt;</span>HelloWorld name<span class=\"token operator\">=</span><span class=\"token string\">\"CIS 197\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  root\n<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>class: large</p>\n<h1>State and Props</h1>\n<p>\"Props\" is short for \"<strong>properties</strong>\"—data that is passed to this component in key-value pairs.</p>\n<p>The previous example used its <code class=\"language-text\">props</code> to access a value that was defined as a JSX attribute. Props should be treated as immutable by their components (though they may be mutable <em>outside</em> of this component).</p>\n<p>Mutable values are encapsulated as the <strong>state</strong> of a component. A component is allowed to mutate its state, usually in response to events like clicks or a user typing.</p>\n<hr>\n<p>class: large</p>\n<h1>Changing State in Class Components</h1>\n<p>Changing state implies that information encapsulated in your React component has changed, which means you should re-render the component to update the DOM. <em>You should never modify state directly!</em> Instead, use React's <code class=\"language-text\">setState</code> function which does this for you. This is how React knows when it should try to re-render parts of the DOM.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">updateGreeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> greeting<span class=\"token operator\">:</span> <span class=\"token string\">'Goodbye World!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// render code from before</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>Default State</h1>\n<p>You can set default state for React components using the <code class=\"language-text\">getInitialState</code> function, which returns an object to be assigned as initial state (<code class=\"language-text\">this.state</code>) for the component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> greeting<span class=\"token operator\">:</span> <span class=\"token string\">'Hello World!'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// render code from before</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>Default State</h1>\n<p>We can also do this through the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> greeting<span class=\"token operator\">:</span> <span class=\"token string\">'Hello World!'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// render code from before</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>React Hooks</h1>\n<p>React Hooks are a relatively new feature of React which let us perform similar state operations in functional components.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HelloWorld</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>greeting<span class=\"token punctuation\">,</span> setGreeting<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">setGreeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Yooo what is good World?!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>greeting<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">useState</code> takes in the default value (in this case <code class=\"language-text\">&#39;Loading...&#39;</code>). It returns an <em>array</em>. This seems strange, but it's basically how a function in JS can return multiple values. The first item in the array is the stateful value, and the second item in the array is a setter for that state.</p>\n<p>Notice how we destructure out these two returned items from the array.</p>\n<hr>\n<p>class: med-large, smaller-code</p>\n<h2>Event Listeners</h2>\n<p>Event listeners are set up in JSX. They should refer to functions on the component, which will (almost always) then update the state of the component using <code class=\"language-text\">setState</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LikeButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> liked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> liked <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> liked<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>liked <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> liked <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token keyword\">const</span> txt <span class=\"token operator\">=</span> liked <span class=\"token operator\">?</span> <span class=\"token string\">'Unlike'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Like'</span>\n    <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> liked <span class=\"token operator\">?</span> <span class=\"token string\">'#3b5998'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'#627AAC'</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">👍 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>txt<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>Functionally...</h1>\n<p>Note how this code is shorter and more to the point:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LikeButton</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>liked<span class=\"token punctuation\">,</span> setLiked<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> txt <span class=\"token operator\">=</span> liked <span class=\"token operator\">?</span> <span class=\"token string\">'Unlike'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Like'</span>\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> liked <span class=\"token operator\">?</span> <span class=\"token string\">'#3b5998'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'#627AAC'</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLiked</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>liked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">👍 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>txt<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>class: med-large, smaller-code</p>\n<h2>The Component Lifecycle</h2>\n<p>React components allow you to override certain functions that let you hook into different stages of a component's <em>lifecycle</em>. A few functions from the\n<a href=\"https://facebook.github.io/react/docs/react-component.html\">Component Docs</a> are demonstrated below.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LikeButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// triggered the first time the component</span>\n    <span class=\"token comment\">// is mounted into the DOM</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mounted to the DOM!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// triggered *after* props or state change</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Received new state and/or props!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// triggered *before* component removed</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'About to be removed from the DOM!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>The Component Lifecycle Functionally</h2>\n<p>In functional components, we don't have access to these lifecycle methods. Instead, we use a different hook called <code class=\"language-text\">useEffect</code> where the passed in function is run every time variables which the effect depends on change.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isDoneLoading<span class=\"token punctuation\">,</span> setIsDoneLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDoneLoading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token comment\">// Do nothing</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'We finished loading!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token function\">setIsDoneLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The first parameter to <code class=\"language-text\">useEffect</code> is a callback function, and the second is a list of dependencies.</p>\n<hr>\n<p>class: large</p>\n<h1>Let's take a breather</h1>\n<p>The above topics are unique concepts which take advantage of things we have already learned but in unique ways. It takes time to get familiar with the syntax and when to use what.</p>\n<p><u>The core idea is that React makes it possible for us to have full control over when and how our data changes and how our frontend app should respond to these changes.</u></p>\n<hr>\n<p>class: large</p>\n<h1>Nesting components</h1>\n<p>A component can have subcomponents, which can have components themselves, and so on. This allows for component re-use, and it's very intuitive, since a component is JSX looks just like any other element.</p>\n<p>Generally a higher level component will change its subcomponents when it re-renders itself. Since React efficiently recomputes the DOM, this is much more efficient than it sounds!</p>\n<hr>\n<h2>Wrapper components</h2>\n<p>Components placed inside of a wrapper component are known as <code class=\"language-text\">children</code> and they are passed as props:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Container</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> paddingLeft<span class=\"token operator\">:</span> <span class=\"token string\">'25%'</span><span class=\"token punctuation\">,</span> paddingRight<span class=\"token operator\">:</span> <span class=\"token string\">'25%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Container</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Dope page</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">That has padding around it because of the container</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Container</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>class: x-large</p>\n<h1>Example Code</h1>\n<p><strong>Note:</strong> these are a little antiquated, but the logic is still useful today!</p>\n<p>Some example code for React is available on <a href=\"https://github.com/cis197/react-examples\">the CIS 197 Github</a>. Be sure to reference this when completing the homework assignment!</p>\n<p>We will also post code from lecture <a href=\"https://github.com/cis197/live-code\">here.</a></p>\n<hr>\n<p>class: x-large</p>\n<h1>Coming Up</h1>\n<ul>\n<li>Homework: React Comments App which you build from scratch</li>\n<li>Start thinking up some final project ideas!</li>\n</ul>","frontmatter":{"date":"January 29, 2019","path":"/lectures/8-react","title":"ReactJS","hidden":false}}},"pageContext":{}}}